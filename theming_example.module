<?php

/**
 * @file
 * Explains how a module declares theme functions, preprocess functions, and
 * templates.
 *
 * The underlying approach is that a module should allow themes to do all
 * rendering, but provide default implementations where appropriate.
 *
 * For a more descriptive introduction to creating a module that uses the
 * theme layer, see http://drupal.org/node/165706.
 */

/**
 * Implements hook_menu().
 */
function theming_example_menu() {
  $items['examples/theming_example'] = array(
    'title'            => 'Basic Theming Example',
    'description'      => 'Some theming examples.',
    'page callback'    => 'theming_example_basic_content',
    'access callback'  => TRUE,
    'access arguments' => array('access content'),
  );
  $items['examples/theming_example/theming_example_with_template'] = array(
    'title'            => 'Theming with a template and preprocess function',
    'page callback'    => 'theming_example_with_template',
    'access arguments' => array('access content'),
    'weight'           => 1,
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided as default representations by this module.
 *
 * A theme can override these default implementations.
 *
 * This hook_theme() is really an informational note to Drupal.  It tells Drupal :
 *   Hey, this module wants to enable rendering beyond the return of a straight string.
 *   This module wants to let themes override the way returned data can be portrayed.
 *   The theme can either override via a theme function (first case below) or a
 *   template file (second case below).
 *
 *   As part of this "theme info passing to Drupal", this hook tells Drupal the
 *   name of the function that is overridable, and the name of the 'arguments' (variables)
 *   which the module is passing off and are themable.
 *
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_theme/6
 */
function theming_example_theme() {
  return array(
    'theming_example_basic_content' => array(
      // 'arguments' are a required key for D6.
      'arguments' => array('raw_content' => NULL),     // Set to NULL as kind of throw-away
    ),
    // When declaring a template file, a corresponding preprocess function
    // is also automatically assigned -- but not necessarily required to be there.
    // More preprocess functions can be registered, by using the 'preprocess functions'
    // array element, commented out in this example.
    'theming_example_with_template' => array(
      'arguments' => array('content' => NULL),
      'template'  => 'theming_example_with_template',
      // 'preprocess functions' => array('theming_example_with_template_extra'),
    ),
  );
}

/**
 * Initial landing page explaining use of the module.
 * This is the page callback function for the simple implementation (no template).
 */
function theming_example_basic_content() {
  $content = t('Most simple example of returning content with page callback. No templates nor theme functions.');
  $content = theme('theming_example_basic_content', $content);
  return $content;
}

/**
 * Basic theme function.
 *
 * This is the default function to handle
 * `theme('theming_example_basic_content', $content)`.
 *
 * Other functions at the theme layer can override this, for example :
 *   function mythemename_theming_example_basic_content($content = NULL)
 *
 * Note :
 *   mythemename_ above is prepended to the default theme function name
 *   of theming_example_basic_content.  The default implementation is
 *   named theme_theming_example_basic_content, so the default prefix is 'theme_'.
 *   The argument (variable) of 'raw_content' is an argument to the overriding function mythemename_theming_example_basic_content()
 *   $raw_content is the "raw" content we got out of the module page callback
 */
function theme_theming_example_basic_content($raw_content = NULL) {
  // Here $themed_content is what the page will spit out
  $themed_content = '<h1>' . t('The Content') . ':</h1>' . check_plain($raw_content);
  return $themed_content;
}

/**
 * Page callback function for our page that uses a template and preprocess function.
 * This callback function demonstrates using a template and preprocess function.
 */
function theming_example_with_template() {
  $content = t('This is just our raw content.');
  // We have a template, and setup hook_theme, but not yet a preprocess function
  $content = theme('theming_example_with_template', $content);
  // This is what Drupal returns to the browser
  return $content;
}

/**
 * Preprocess function to modify variables before passing them to the template.
 *
 * Template preprocess functions are called automatically when a template
 * file is in use.
 *
 * The function naming pattern is template_preprocess_HOOKNAME
 * where HOOKNAME is the name of the 'theming item' identified in hook_theme().
 *
 * For core examples, see 'template_preprocess_page' and
 * 'template_preprocess_node'.
 */
 function template_preprocess_theming_example_with_template(&$variables) {
  $variables['content'] .= ' ' . t('This text was added in a preprocess function.');
  $variables['aside'] = t('This separate content came completely from a preprocess function.');
  // Note $variables is pass by ref, so we don't need to return anything
}

